// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User{ //father 
  id String @id @default(uuid())
  email String @unique
  password String
  role UserRole
  needPasswordChange Boolean @default(true)
  status UserStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  admin Admin? @relation("UserToAdmin")
  doctor Doctor? @relation("UserToDoctor")
  patient Patient?  @relation("UserToPatient")

@@map("users")
}


model Admin{ //child ---admin is subclass of User and its under the USer super class so it need to be linked with USer
  id String @id @default(uuid())
  name String 
  email String @unique
  profilePhoto String?
  contactNumber String
  isDeleted Boolean @default(false)
  user User @relation("UserToAdmin", fields: [email], references: [email])

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
@@map("admin")
}

model Doctor{
  id String @id @default(uuid())
  name String 
  email String @unique
  contactNumber String
  address String
  profilePhoto String?
  registrationNumber String @unique()
  experience Int @default(0)
  gender Gender
  appointmentFee Int 
  qualification String
  currentWorkingPlace String 
  designation String
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation("UserToDoctor",fields:[email],references:[email])
  doctorspecialties DoctorSpecialties[]
  doctorschedules DoctorSchedules[]
@@map("doctors")
}

model Patient{
  id String @id @default(uuid())
  patient_health_data PatientHealthData? @relation("patientToData")
  name String
  email String @unique
  contactNumber String
  address String
  profilePhoto String?
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
medical_report MedicalReport []
  
  user User @relation("UserToPatient",fields:[email],references:[email])
@@map("patients")
}


model Specialties{
  id String @id @default(uuid())
  doctorSpecialties DoctorSpecialties[] 
  title String
  icon String
  @@map("specialties")
}     

model DoctorSpecialties {
  specialitiesId String
  doctorId String
  specialties Specialties @relation( fields: [specialitiesId], references: [id])
doctor Doctor @relation(fields: [doctorId],references: [id])
  @@id([specialitiesId, doctorId])
  @@map("doctor_specialties")
}


model PatientHealthData{
  id String @id @default(uuid())
  patientId String @unique
  patient Patient  @relation("patientToData",fields: [patientId],references: [id])
  gender Gender
  dateOfBirth DateTime
  bloodGroup BloodGroup
  hasAllergies        Boolean?      @default(false)
  hasDiabetes         Boolean?      @default(false)
  height              String
  weight              String
  smokingStatus       Boolean?      @default(false)
  dietaryPreferences  String?
  pregnancyStatus     Boolean?      @default(false)
  mentalHealthHistory String?
  immunizationStatus  String?
  hasPastSurgeries    Boolean?      @default(false)
  recentAnxiety       Boolean?      @default(false)
  recentDepression    Boolean?      @default(false)
  maritalStatus       MaritalStatus @default(UNMARRIED)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@map("patient_health_datas")


}

model MedicalReport{
  id String @id @default(ulid())
  patientId String @unique
  reportName String
patient Patient @relation(fields: [patientId],references: [id])
  reportLink String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("medical_reports")
}

model Schedule{
  id String @id @default(uuid())
  startDateTime DateTime 
  endDateTime DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  doctorschedule DoctorSchedules[]
  @@map("schedules")
}

model DoctorSchedules{
  id String @default(uuid())
  doctorId String 
  scheduleId String
  schedule Schedule @relation(fields: [scheduleId],references: [id])
  doctor Doctor @relation(fields: [doctorId],references: [id])
  isBooked Boolean @default(false)
  appointmentId String?
  @@id([doctorId,scheduleId])
  @@map("doctor_schedules")
}
enum Gender{
  MALE
  FEMALE
}


enum UserRole{
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}

enum UserStatus{
  ACTIVE
  BLOCK
  DELETED

}

enum  BloodGroup{
  A_POSITIVE
  B_POSITIVE
  O_POSITIVE
  AB_POSITIVE
  A_NEGETIVE
  B_NEGETIVE
  O_NEGETIVE
AB_NEGETIVE
  
}

enum MaritalStatus{
  MARRIED
  UNMARRIED
}